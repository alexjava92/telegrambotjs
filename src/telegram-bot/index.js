import {askQuestion} from "../chat-gpt/chat-gpt.js";
import TelegramBot from 'node-telegram-bot-api';
import {checkingYourSubscription, exist, sendMessageInChunks} from "./botLogic.js";
import {addStatus, deleteGetText, getStatus, getStatusOne} from "../database/database.js";
import {logger} from "../logger/logger.js";


const token = '6007077141:AAHKrrFa6xKW4nUd6Km_oDJ0pxJLiuL7DQE';// @Chat_GPT_RUSS_bot
//const token = '6006265660:AAGqERvOuQtqteLH3NIMax3LEeRVZfqgpWs';// @ChatGPT_russ_bot

//https://t.me/Btcbank24com_v2_bot?start=btcbank24
//https://t.me/Chat_GPT_RUSS_bot?start=btcbank24







export const bot = new TelegramBot(token, {polling: true});

logger.info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');

const keyboardText = {
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                    callback_data: 'button_pressed',
                },
                {
                    text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                    callback_data: 'button_pressed',
                },
            ],
        ],
    },
}

const keyboardMenu = {
    reply_markup: {
        keyboard: [
            [
                {
                    text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥',

                },
            ],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
    },
}

let statusUserFinal;

let status_1;

try {
    async function handleUserMessage(msg) {
        const {
            message_id,
            chat: {id: chatId, first_name, username, type},
            text: messageText,
            photo, sticker, document,
        } = msg;

        if (photo) {
            console.log("–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ");
        }

        const st = await getStatusOne(chatId);
        status_1 = st[0].column_status_1;

        return status_1 === "yes_subscription";
    }

    /*bot.onText(/\/start/, async (msg) => {
        await exist(msg.chat.id, msg.chat.username, msg.chat.first_name);
        await checkingYourSubscription(msg.chat.id);

        if (await handleUserMessage(msg)) {
            const chatId = msg.chat.id;
            await addStatus(chatId, "start_dialog");
            await deleteGetText(chatId);

            const messageText =
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " +
                msg.chat.first_name +
                ", —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. \n" +
                "\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n" +
                "\n–ß—Ç–æ –±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\" " +
                "—ç—Ç–æ –æ—Ç—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤.";

            await bot.sendMessage(chatId, messageText, keyboardMenu);

            return;
        }
    });

    bot.onText(/–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥/i, async (msg) => {
        if (await handleUserMessage(msg)) {
            const chatId = msg.chat.id;
            await bot.sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!");
            await deleteGetText(chatId);
        }
    });

    bot.onText(/–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥/i, async (msg) => {
        if (await handleUserMessage(msg)) {
            const chatId = msg.chat.id;
            await bot.sendMessage(
                chatId,
                "–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!" + "\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ..."
            );
            await addStatus(chatId, "start_dialog");
        }
    });

    bot.on("message", async (msg) => {
        const {
            message_id,
            chat: {id: chatId, first_name, username, type},
            text: messageText,
            photo, sticker, document,
        } = msg;

        console.log(
            `[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${first_name} –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: ${messageText} message_id: ${message_id}]`
        );
        await exist(chatId, username, first_name);
        await checkingYourSubscription(chatId);
        await addStatus(chatId, 'start_dialog');

        if (photo) {
            console.log("–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ");
            await bot.sendMessage(chatId, "üü¢ –Ø –µ—â–µ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—è —ç—Ç–æ–º—É –æ–±—É—á–∞—Ç. ü§≠");
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            return;
        }
        if (sticker) {
            console.log("–ø–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä");
            await bot.sendMessage(chatId, "üü¢ –Ø –µ—â–µ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—è —ç—Ç–æ–º—É –æ–±—É—á–∞—Ç. ü§≠");
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            return;
        }
        if (document) {
            console.log("–ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª");
            await bot.sendMessage(chatId, "üü¢ –Ø –µ—â–µ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—è —ç—Ç–æ–º—É –æ–±—É—á–∞—Ç. ü§≠");
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            return;
        }
        const st = await getStatusOne(chatId);
        status_1 = st[0].column_status_1;
        if (status_1 === "yes_subscription") {
            try {
                let statusUser;
                const result = await getStatus(chatId);
                console.log(result);
                statusUser = result[0].column_status;
                console.log("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å: " + statusUser);
                statusUserFinal = statusUser;

            } catch (error) {
                console.error("Error:", error);
            }

            if (statusUserFinal === "start_dialog") {
                const chatId = msg.chat.id;
                const sentMessage = await bot.sendMessage(
                    chatId,
                    "üìù –ù–µ–π—Ä–æ–Ω–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç... –æ—Ç 5 —Å–µ–∫ –¥–æ 1 –º–∏–Ω—É—Ç—ã –º–æ–≥—É—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã"
                );
                const messageId = sentMessage.message_id;
                let text = await askQuestion(msg.text, chatId);
                console.log(message_id);
                await bot.deleteMessage(chatId, messageId);
                await bot.sendMessage(chatId, "üü¢ " + text);
                return;
            }
        }
    });

    bot.on('callback_query', async (callbackQuery) => {
        const action = callbackQuery.data;
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const photo = msg.text.photo;

        if (photo) {
            console.log('–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ')
        }

        if (action === 'checking_your_subscription') {
            await checkingYourSubscription(chatId)
            const st = await getStatusOne(chatId);
            status_1 = st[0].column_status_1;
            if (status_1 === 'yes_subscription') {
                await bot.sendMessage(chatId, 'üòä –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.');
            } else
                await bot.sendMessage(chatId, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî');
            /!*await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!'
            });*!/
            return;
        }
    });*/

    bot.on("text", async (msg) => {
        const {
            message_id,
            chat: { id: chatId, first_name, username, type },
            text: messageText,
        } = msg;

        console.log(`[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${first_name} –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: ${messageText} message_id: ${message_id}]`);
        await exist(chatId, username, first_name);
        await checkingYourSubscription(chatId);

        if (messageText === "/start") {
            if (await handleUserMessage(msg)) {
                await addStatus(chatId, "start_dialog");
                await deleteGetText(chatId);

                const welcomeMessage =
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " +
                    first_name +
                    ", —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. \n" +
                    "\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n" +
                    "\n–ß—Ç–æ –±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\" " +
                    "—ç—Ç–æ –æ—Ç—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤.";

                await bot.sendMessage(chatId, welcomeMessage, keyboardMenu);
                return;
            }
        } else if (messageText === "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥") {
            if (await handleUserMessage(msg)) {
                await bot.sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!");
                await deleteGetText(chatId);
            }
        } else if (messageText === "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥") {
            if (await handleUserMessage(msg)) {
                await bot.sendMessage(chatId, "–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ...");
                await addStatus(chatId, "start_dialog");
            }
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const st = await getStatusOne(chatId);
            status_1 = st[0].column_status_1;

            if (status_1 === "yes_subscription") {
                try {
                    let statusUser;
                    const result = await getStatus(chatId);
                    console.log(result);
                    statusUser = result[0].column_status;
                    console.log("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å: " + statusUser);
                    statusUserFinal = statusUser;
                } catch (error) {
                    console.error("Error:", error);
                }

                if (statusUserFinal === "start_dialog") {
                    const sentMessage = await bot.sendMessage(chatId, "üìù –ù–µ–π—Ä–æ–Ω–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç... –æ—Ç 5 —Å–µ–∫ –¥–æ 1 –º–∏–Ω—É—Ç—ã –º–æ–≥—É—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã");
                    const messageId = sentMessage.message_id;
                    let text = await askQuestion(msg.text, chatId);


                    console.log(message_id);
                    await bot.deleteMessage(chatId, messageId);
                    await sendMessageInChunks(chatId, "üü¢ " + text);
                    return;
                }
            }
        }
    });

    bot.on('callback_query', async (callbackQuery) => {
        const action = callbackQuery.data;
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const photo = msg.text.photo;

        if (photo) {
            console.log('–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ')
        }

        if (action === 'checking_your_subscription') {
            await checkingYourSubscription(chatId)
            const st = await getStatusOne(chatId);
            status_1 = st[0].column_status_1;
            if (status_1 === 'yes_subscription') {
                await bot.sendMessage(chatId, 'üòä –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –ª—É–Ω–µ?');
            } else
                await bot.sendMessage(chatId, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî');
            await bot.answerCallbackQuery(callbackQuery.id, {
            text: ''
        });
        return;
    }
});





} catch (err) {
    console.log(err)
}

