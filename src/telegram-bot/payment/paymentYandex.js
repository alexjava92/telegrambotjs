// –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
import {bot} from "../index.js";
import {logger} from "../../logger/logger.js";
import {ADMIN} from "../botLogic.js";
import {User} from "../../Users/User.js";
import {savePaymentInfo} from "../../database/database.js";


//–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
export async function sendInvoice(chatId, amount, prevMessageId) {
    const title = "–û–ø–ª–∞—Ç–∞ ChatGPT | bot";
    const description = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞, –±–æ—Ç–∞.";
    const payload = "YourPayload";  // –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥
    const providerToken = process.env.PROVIDER_TOKEN;  // –¢–æ–∫–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    //const startParameter = "test";
    const currency = "RUB";  // –í–∞–ª—é—Ç–∞
    const prices = [
        {label: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount: amount * 100},
    ];

    console.log('prevMessageId', prevMessageId.message_id)

    try {
        await bot.sendInvoice(chatId, title, description, payload, providerToken, currency, prices);
        logger.info("Invoice sent");
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (prevMessageId) {
            await bot.deleteMessage(chatId, prevMessageId.message_id);

        }
    } catch (error) {
        logger.error("Error sending invoice:", error);
    }
}

//–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function handlePreCheckoutQuery(bot, preCheckoutQuery) {

    try {
        // —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
        logger.info("–û–ø–ª–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã")


    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
        await bot.sendMessage(ADMIN, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –æ—Ç ${preCheckoutQuery.from.first_name} ${error}`);
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
        await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
            error_message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        });
    }
}

//–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
export async function handleSuccessfulPayment(bot, message) {

    try {
        // –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä)
        const payment = message.successful_payment.telegram_payment_charge_id;
        const balance = message.successful_payment.total_amount / 100;
        await savePaymentInfo(message.chat.id, payment);
        console.log(message)

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã

        const chatId = message.chat.id;
        logger.info(`–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç ${message.from.first_name}`);
        await bot.sendMessage(ADMIN, `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç ${message.from.first_name} —Å—É–º–º–∞: ${balance} —Ä—É–±.`);
        await bot.sendMessage(chatId, `üëå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É ${message.from.first_name}, –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`);
        const user = await User.getUser(chatId);

        if (user) {
            await user.setSubscriptionActive();
            await user.resetResponseCount();
           // await user.setSubscriptionEndDate();
            const totalBalance = await user.getBalance() + balance
            await user.setBalance(totalBalance);
        } else {
            logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        }


    } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:", error);
        await bot.sendMessage(ADMIN, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –æ—Ç ${message.from.first_name} ${error}`);
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
        await bot.sendMessage(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
}



