import {createInvoice, getRates} from "../../cryptoPay/cryptoPay.js";
import {checkingYourSubscription} from "../botLogic.js";
import {getStatusOne} from "../../database/database.js";
import {User} from "../../Users/User.js";
import {sendInvoice} from "../payment/paymentYandex.js";
import {logger} from "../../logger/logger.js";
import {Profile} from "../profile/Profile.js";
import {insertInvoice} from "../../database/cryptoPayBD.js";

export async function handleCallbackQuery(callbackQuery, bot) {

    const callbackQueryId = callbackQuery.id;

    // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    const action = callbackQuery.data;
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;

    const createPaymentButtons = async (amount, chatId) => {
        const rates = await getRates(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞–ª—é—Ç–∞–º–∏
        const buttons = Object.entries(rates).map(([currency, rate]) => {
            let cryptoAmount;
            if (currency === 'USDT' || currency === 'USDC') {
                cryptoAmount = (amount / rate).toFixed(2); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è USDT –∏ USDC
            } else {
                cryptoAmount = (amount / rate).toFixed(8); // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤
            }
            return {
                text: `${currency} - ${cryptoAmount} (${amount}) —Ä—É–±.`,
                callback_data: `pay_${currency}_${cryptoAmount}_${chatId}`,
            };
        });

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç options —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const options = {
            reply_markup: {
                inline_keyboard: buttons.map((button) => [button]),
            },
        };

        return options;
    };

    const handleButtonClick = async (callbackQuery) => {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è', callbackQuery);

        const callbackData = callbackQuery.data;
        const [action, currency, amount, chatId] = callbackData.split('_');

        if (action === 'pay') {

            try {
                console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è pay');
                const invoice = await createInvoice(amount, currency, chatId);
                if (invoice) {

                    // –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    const messageWithPaymentButtons = callbackQuery.message;
                    await bot.editMessageText(
                        `–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${invoice.bot_invoice_url}`,
                        {
                            chat_id: chatId,
                            message_id: messageWithPaymentButtons.message_id,
                            disable_web_page_preview: true,
                        }
                    );
                    await insertInvoice(invoice);

                    // –ò–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    // await bot.deleteMessage(chatId, messageWithPaymentButtons.message_id);

                   // await bot.answerCallbackQuery(callbackQuery);
                } else {
                    console.error('createInvoice –≤–µ—Ä–Ω—É–ª–∞ undefined –∏–ª–∏ null');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
            }
        }
    };

    if (action.startsWith('pay_')) {
        console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
        await handleButtonClick(callbackQuery);
    }

    if (action === 'checking_your_subscription') {
        await checkingYourSubscription(chatId)
        const st = await getStatusOne(chatId);
        const status_1 = st[0].column_status_1;
        if (status_1 === 'yes_subscription') {
            await bot.sendMessage(chatId, 'üòä –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –ª—É–Ω–µ?');
        } else
            await bot.sendMessage(chatId, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòî');
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: ''
        });
        return;
    }
    if (action === 'buy_subscription') {
        const options = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    // [{text: '–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: 'buy_subscription1'}],
                    [{text: 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data: 'buy_subscription2'}],

                ]
            }
        };
        const messageWithPaymentButtons = callbackQuery.message;
        await bot.editMessageText(
            '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º 200 —Ä—É–±.',
            {
                chat_id: chatId,
                message_id: messageWithPaymentButtons.message_id,
            }
        );
        const user = await User.getUser(chatId);
        await user.setUserStatus('payment_amount')

        /*await bot.sendMessage(chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:", options);*/
        await bot.answerCallbackQuery(callbackQueryId);

    }
    if (action === 'buy_subscription2') {
        const user = await User.getUser(chatId);
        const amount = await user.getPaymentAmount();
        const prevMessageId = callbackQuery.message;
        await sendInvoice(chatId, amount, prevMessageId);
        await bot.answerCallbackQuery(callbackQueryId);
    }
    if (action === 'buy_subscription_crypto') {
        const user = await User.getUser(chatId);
        const amount = await user.getPaymentAmount();
        const keyboard = await createPaymentButtons(amount, chatId);
        /*const messageWithPaymentButtons = callbackQuery.message_id;
        await bot.deleteMessage(chatId, messageWithPaymentButtons);*/
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',  keyboard );
        await bot.answerCallbackQuery(callbackQueryId);
    }
    if (action === 'show_plans') {
        // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
        await bot.sendMessage(chatId, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        try {
            await bot.answerCallbackQuery(callbackQueryId);
        } catch (error) {
            logger.error(error.message)
        }

    }
    if (action === 'show_profile') {
        logger.info('–∑–∞–ø—É—Å—Ç–∏–ª—Å—è show_profile')
        const user = await User.getUser(chatId);
        await Profile(user);
    }
}