import {logger} from "../../logger/logger.js";
import {checkingYourSubscription, exist} from "../botLogic.js";
import {
    addStatus,
    deleteGetText, getResponseCount,
    getStatus,
    getStatusOne,
    getUserDetailsFromDB,
    resetResponseCount, setResponseCount,
} from "../../database/database.js";
import {addToHistory, askQuestion, generateAudio, generateImage} from "../../chat-gpt/chat-gpt.js";

import {bot} from "../index.js";
import moment from "moment-timezone";
import {displayCardInfo} from "../../BinChecker/BinChecker.js";
import ffmpeg from 'fluent-ffmpeg';
import ffmpegInstaller from '@ffmpeg-installer/ffmpeg';
import {promisify} from 'util';
import {createWriteStream, unlink} from "fs";
import {pipeline} from 'stream';
import {token} from "../config/Config.js";
import {
    convertAudioToMP3, deleteTemporaryFiles,
    transcribeAudio
} from "../audio/AudioFunctions.js";
import {processUserInput} from "../audio/ProcessUserInput.js";
import {User} from "../../Users/User.js";
import {Profile} from "../profile/Profile.js";


const ffmpegPath = ffmpegInstaller.path;
ffmpeg.setFfmpegPath(ffmpegPath);


const keyboardMenu = {
    reply_markup: {
        keyboard: [
            [
                {
                    text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥',

                },
                {
                    text: 'üë§–ü—Ä–æ—Ñ–∏–ª—å',
                    callback_data: 'show_profile',

                },
            ],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
    },
}
let statusUserFinal;
let status_1;

const usersState = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


//–æ–±—Ä–µ–∑–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 4–∫ —Å–∏–º–≤–æ–ª–æ–≤
async function sendMessageInChunks(chatId, text) {
    // –í–∞—à –∫–æ–¥ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º
    const maxMessageLength = 4000;
    const textLength = text.length;

    if (textLength <= maxMessageLength) {
        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown'
        });
    } else {
        let startIndex = 0;
        let endIndex = maxMessageLength;

        while (startIndex < textLength) {
            const messageChunk = text.slice(startIndex, endIndex);
            await bot.sendMessage(chatId, messageChunk);

            startIndex += maxMessageLength;
            endIndex += maxMessageLength;
        }
    }
}

export async function handleUserMessage(msg) {
    const {
        message_id,
        chat: {id: chatId, first_name, username, type},
        text: messageText,
        photo, sticker, document,
    } = msg;


    const st = await getStatusOne(chatId);
    status_1 = st[0].column_status_1;

    return status_1 === "yes_subscription";
}

export async function handleText(msg, bot) {

    const {
        message_id,
        chat: {id: chatId, first_name, username, type},
        text: messageText,
    } = msg;

    // –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    user = await User.getUser(chatId);
    if (!user) {
        await exist(chatId, username, first_name, messageText);
        user = await User.getUser(chatId);
    }
    console.log(user)
    logger.info(`[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: ${messageText} message_id: ${message_id}]`);


    if (messageText === "/start") {
        if (await handleUserMessage(msg)) {
            await addStatus(chatId, "start_dialog");
            await deleteGetText(chatId);
            usersState.set(chatId, false);


            const welcomeMessage =
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " +
                first_name +
                ", —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. \n" +
                "\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n" +
                "\n–ß—Ç–æ –±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\" " +
                "—ç—Ç–æ –æ—Ç—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–∞–º—è—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.";

            await bot.sendMessage(chatId, welcomeMessage, keyboardMenu);
            return;
        }
    } else if (messageText === "üë§–ü—Ä–æ—Ñ–∏–ª—å") {
        const chatId = msg.chat.id;
        const user = await User.getUser(chatId);
        await Profile(user);

    } else if (messageText === "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥") {
        if (await handleUserMessage(msg)) {
            await bot.sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!");
            await deleteGetText(chatId);
        }
    } else if (messageText.startsWith('/image') || messageText.startsWith('–Ω–∞—Ä–∏—Å—É–π') || messageText.startsWith('–ù–∞—Ä–∏—Å—É–π')) {
        const commandEnd = messageText.indexOf(' ') + 1;
        const prompt = messageText.slice(commandEnd);
        logger.info(`prompt: ${prompt}`)

        try {
            const sentMessage = await bot.sendMessage(chatId, "—Ä–∏—Å—É—é... 5 - 15 —Å–µ–∫—É–Ω–¥!");
            const messageId = sentMessage.message_id;

            const imageUrl = await generateImage(prompt, chatId);
            await addToHistory(prompt, imageUrl, chatId);

            if (imageUrl) {
                await bot.sendPhoto(chatId, imageUrl, {
                    parse_mode: 'Markdown'
                });
                await bot.deleteMessage(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ä–∏—Å—É—é..."
            } else {
                await bot.deleteMessage(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ä–∏—Å—É—é..."
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å');
            }
        } catch (error) {
            console.error("Error generating image:", error.message);
        }
    } else if (messageText.startsWith('/voice')) {
        try {
            const text = messageText.slice(6); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ
            const audioFilePath = await generateAudio(text);

            if (audioFilePath) {
                await bot.sendAudio(chatId, audioFilePath);
            } else {
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        } catch (error) {
            console.error('Error generating audio:', error.message);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    } /*else if (messageText === "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥") {
        if (await handleUserMessage(msg)) {
            await bot.sendMessage(chatId, "–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ...");
            await addStatus(chatId, "start_dialog");
        }
        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç /card 5536 9139 0670 5666
    }*/ else if (messageText.startsWith("/card")) {

        const cardPattern = /\/card\s*((\d{4}[\s\-]?){1,3}\d{2,4}|(\d{4}[\s\-]?){3}\d{4})/;

        const cardMatch = messageText.match(cardPattern);
        if (cardMatch) {
            const cardNumber = cardMatch[0].replace(/\/card\s+|\s|-/g, ''); // –£–±–∏—Ä–∞–µ–º "/card ", –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
            await addStatus(chatId, "card_check");
            await bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: ${cardNumber}`);

            const resultCardInfo = await displayCardInfo(cardNumber, chatId)
            await bot.sendMessage(chatId, `${resultCardInfo}`);
            return;
        } else {
            await bot.sendMessage(chatId, `üî¥ –ù–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞.`);
            return;
        }

    } else {


        const st = await getStatusOne(chatId);
        status_1 = st[0].column_status_1;
        let statusUser;
        const result = await getStatus(chatId);
        console.log(result);
        statusUser = result[0].column_status;
        console.log("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å: " + statusUser);
        statusUserFinal = statusUser;

        logger.info(`status_1 ${status_1}`)
        logger.info(`statusUserFinal ${statusUserFinal}`)

        if (statusUser === "payment_amount") {
            const amount = parseFloat(messageText);

            if (isNaN(amount)) {
                await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.");
            } else if (amount < 200 || amount > 300000) {
                await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 200 –¥–æ 300000.");
            } else {
                const options = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data: 'buy_subscription2'}],
                            [{text: '–û–ø–ª–∞—Ç–∞ crypto', callback_data: 'buy_subscription_crypto'}]
                        ]
                    }
                };

                await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ ${amount} —Ä—É–±.`, options);
                const user = await User.getUser(chatId);
                await user.setPaymentAmount(amount);
                await user.setUserStatus('start_dialog');
            }
        }

        if (status_1 === "yes_subscription") {
            try {
                if (statusUserFinal === "start_dialog") {
                    try {
                        await checkingYourSubscription(user.chatId);
                        // –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        const canProceed = await handleUserRequest(user.chatId);
                        if (!canProceed) return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç, –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (usersState.get(chatId)) {
                            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                            await bot.sendMessage(chatId, '–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ üòä, –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.')
                            return;
                        }
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        usersState.set(chatId, true);


                        const sentMessage = await bot.sendMessage(chatId, "üìù GPT –ø–µ—á–∞—Ç–∞–µ—Ç... –æ—Ç 5 —Å–µ–∫ –¥–æ 1 –º–∏–Ω—É—Ç—ã –º–æ–≥—É—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã");
                        const messageId = sentMessage.message_id;
                        let text = await askQuestion(msg.text, chatId);

                        await bot.deleteMessage(chatId, messageId);
                        try {
                            await sendMessageInChunks(chatId, "üü¢ " + text);
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                        } finally {
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                            usersState.set(chatId, false);
                        }
                    } catch (error) {
                        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
                        await bot.sendMessage(chatId, '–£–ø—Å —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏ /start –∏ –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ')
                        usersState.set(chatId, false);
                        await deleteGetText(chatId)

                    }
                }
            } catch (error) {
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:", error.message);
            }
        }
    }
}

//–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –¥–∞–µ—Ç 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—é —Ç–∞–º –≥–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
async function handleUserRequest(chatId) {

    const userDetails = await getUserDetailsFromDB(chatId);
    logger.info(`userDetails ${userDetails}`);

    if (!userDetails) {
        logger.error(`No user details found for chatId: ${chatId}`);
        // –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
//        await addNewUser(chatId, userDetails.userName, userDetails.firstName);
        return false;
    }
    const dbDate = moment(userDetails.last_response_date).format('YYYY-MM-DD');
    const currentDate = moment().format('YYYY-MM-DD');

    if (dbDate !== currentDate) {
        logger.info("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:", currentDate);
        logger.info("–î–∞—Ç–∞ –≤ –ë–î:", dbDate);
        logger.info("–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ –ë–î:", userDetails.last_response_date);
        await resetResponseCount(chatId);
    }

    if (userDetails.subscription_status === 'active') {
        return true;
    } else if (userDetails.response_count < 5) {
        logger.info("–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è ChatId:", chatId);
        let count = await getResponseCount(chatId);
        let countPlus = count + 1;
        await setResponseCount(chatId, countPlus)
        return true;
    } else {
        const options = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_subscription'}]
                ]
            }
        };
        await bot.sendMessage(chatId, "üî• <b>–ü—Ä–∏–≤–µ—Ç " + userDetails.userName + "!</b> \n" +
            "\n" +
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ <b>5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å.\n" +
            "\n" +
            "<b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–∞—à—É –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É</b>, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É 24/7, –±—ã—Å—Ç—Ä–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n" +
            "\n" +
            "üíé <b>–ü–ª—é—Å—ã –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏</b>:\n" +
            "\n" +
            "1. <b>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.</b>\n" +
            "2. <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.</b>\n" +
            "3. <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.</b>\n" +
            "\n" +
            "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –æ—Ç –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n" +
            "\n" +
            "üåü <b>–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üåü"
            , options);
        return false;
    }
}


async function getTranscription(msg, bot) {
    const {chat: {id: chatId}, voice: {file_id: fileId}} = msg;
    let tempFilePath, mp3FilePath;

    try {
        logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        const file = await bot.getFile(fileId);
        const fileLink = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

        logger.info(`–ó–∞–≥—Ä—É–∂–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${fileLink}`);

        const response = await fetch(fileLink);
        tempFilePath = `temp_${Date.now()}.${file.file_path.split('.').pop()}`;

        await promisify(pipeline)(
            response.body,
            createWriteStream(tempFilePath)
        );

        mp3FilePath = await convertAudioToMP3(tempFilePath);
        const transcription = await transcribeAudio(mp3FilePath, chatId, bot);
        logger.info(`–¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${transcription}`);

        return transcription;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return null;
    } finally {
        if (tempFilePath && mp3FilePath) {
            await deleteTemporaryFiles(tempFilePath, mp3FilePath);
        }
    }
}

export async function handleVoice(msg, bot) {
    const {chat: {id: chatId}} = msg;

    try {
        const transcription = await getTranscription(msg, bot);

        if (transcription) {
            await processUserInput(transcription, bot, chatId);
        } else {
            await bot.sendMessage(chatId, 'üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, 'üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
}