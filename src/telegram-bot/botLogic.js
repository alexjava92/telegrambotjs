import {bot} from "./index.js";
import {
    addNewUser,
    addStatus,
    addStatusOne,
    getIdUser,
    getUserDetailsFromDB, resetResponseCount, setSubscriptionActive, setSubscriptionEndDate,
    updateUserNameAndFirstName
} from "../database/database.js";
import {runUserExist} from "../database/database.js";
import {logger} from "../logger/logger.js";


export const ADMIN = 194857311
const ADMIN2 = 921469238
const channelUsername = '@chat_gpt_neural_network';

const keyboardText = {
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                    callback_data: 'checking_your_subscription',
                },

            ],
        ],
    },
}
//—Ä–µ—Å—É—Ä—Å –æ—Ç –∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
let resourceFromCome = 'none';
let idUser;

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –µ—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
export const exist = async (chatId, userName, firstName, inputText) => {
    whereDidYouComeFrom(inputText);

    const userExists = await runUserExist(chatId);
    console.log(userExists);

    if (userExists === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î');

        // –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const currentUserDetails = await getUserDetailsFromDB(chatId);
        if (currentUserDetails.userName !== userName || currentUserDetails.firstName !== firstName) {
            await updateUserNameAndFirstName(chatId, userName, firstName);
            logger.info(`–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`);
        }
    }

    if (userExists === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
        await addNewUser(chatId, userName, firstName);
        logger.info('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î');

        const id = await getIdUser(chatId);
        const idUser = id[0].id;

        if (userName === 'undefined') {
            userName = 'none';
        }

        let messageText = 'üë§–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n'
            + firstName + ' | ' + '@' + userName + '\n'
            + 'ID: ' + idUser + ' | ChatID: ' + chatId + '\n'
            + 'Refer:\n'
            + 'Source: ' + resourceFromCome;

        await bot.sendMessage(ADMIN, messageText);
        // await bot.sendMessage(ADMIN2, messageText);
    }
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
export const checkingYourSubscription = async (chatId) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    try {
        const chatMember = await bot.getChatMember(channelUsername, chatId);

        if (chatMember && (chatMember.status === 'member' || chatMember.status === 'administrator'
            || chatMember.status === 'creator')) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
            //  bot.sendMessage(chatId, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.');
            await addStatusOne(chatId, 'yes_subscription')
            await addStatus(chatId, "start_dialog");
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @chat_gpt_neural_network, ' +
                '—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.', keyboardText);
            await addStatusOne(chatId, 'no_subscription')

        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ' +
            '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

//–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç /start "—Ä–µ—Å—É—Ä—Å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å –∫–∞–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –ø—Ä–∏—à–ª–∏ –≤ –±–æ—Ç–∞
export const whereDidYouComeFrom = (inputText) => {
// –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    const parts = inputText.split(" ");

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (–∏–Ω–¥–µ–∫—Å 1)
    const desiredPart = parts[1];

    resourceFromCome = desiredPart;
}

// –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
export async function sendInvoice(chatId) {
    const title = "–ü—Ä–µ–º–∏—É–º";
    const description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.";
    const payload = "YourPayload";  // –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥
    const providerToken = "381764678:TEST:66777";  // –¢–æ–∫–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    //const startParameter = "test";
    const currency = "RUB";  // –í–∞–ª—é—Ç–∞
    const prices = [
        {label: "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", amount: 15400}
    ];


    try {
        await bot.sendInvoice(chatId, title, description, payload, providerToken, currency, prices);
        logger.info("Invoice sent");
    } catch (error) {
        logger.error("Error sending invoice:", error);
    }
}

//–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function handlePreCheckoutQuery(bot, preCheckoutQuery) {

    try {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
        const chatId = preCheckoutQuery.from.id;
        logger.info(`–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç ${preCheckoutQuery.from.first_name}`);
        await bot.sendMessage(ADMIN, `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç ${preCheckoutQuery.from.first_name}`);
        await bot.sendMessage(chatId, `üëå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É ${preCheckoutQuery.from.first_name}, –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`);
        await setSubscriptionActive(chatId)
        await resetResponseCount(chatId)
        await setSubscriptionEndDate(chatId)

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
        await bot.sendMessage(ADMIN, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –æ—Ç ${preCheckoutQuery.from.first_name} ${error}`);
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
        await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
            error_message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        });
    }
}

//–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä
export function processCardNumber(cardNumber) {
    try {
    const firstFourDigits = cardNumber.substring(0, 6);  // –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã
    return { firstFourDigits };
    }catch (error){

    }
}
