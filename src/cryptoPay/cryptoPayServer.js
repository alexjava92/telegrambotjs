// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CryptoPay —Å —Ç–æ–∫–µ–Ω–æ–º
import {CryptoPay} from "@foile/crypto-pay-api";
import * as http from "http";
import crypto from 'crypto';

import {updatePaidInvoice} from "../database/cryptoPayBD.js";
import {User} from "../Users/User.js";
import {getRates} from "./cryptoPay.js";

import {logger} from "../logger/logger.js";
import {ADMIN} from "../telegram-bot/botLogic.js";
import {bot} from "../telegram-bot/index.js";




const appToken = '175443:AAf3emNkIvlWTgKIzjG7WR42g32biNJOSgZ';
const secretKey = crypto.createHash('sha256').update(appToken).digest();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±—Ö—É–∫–∞
const cryptoPay = new CryptoPay(appToken, {
    webhook: {
        serverHostname: 'localhost',
        serverPort: 3001,
        path: '/'
    },
});

cryptoPay.on('invoice_paid', update => handleInvoicePaid(update.payload));


// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
export const server = http.createServer((req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method, req.url);
    if (req.method === 'POST' && req.url === '/') {
        let body = '';

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        req.on('data', (chunk) => {
            body += chunk.toString();
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', chunk.toString());
        });

        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        req.on('end', () => {
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Crypto Pay API:', body);

            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            const hmac = crypto.createHmac('sha256', secretKey).update(body).digest('hex');
            const signature = req.headers['x-cryptobot-signature'];
            console.log('–í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hmac:', hmac);
            console.log('–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:', signature);

            if (signature === hmac) {
                // –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                const update = JSON.parse(body);
                console.log('–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:', update.event);


            } else {
                console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ Crypto Pay API');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            res.statusCode = 200;
            res.end();
        });
    } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        res.statusCode = 404;
        res.end();
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
export async function handleInvoicePaid(invoice) {
    console.log(invoice);
    console.log(`–ò–Ω–≤–æ–π—Å ${invoice.invoice_id} –æ–ø–ª–∞—á–µ–Ω –Ω–∞ —Å—É–º–º—É ${invoice.amount} ${invoice.asset}`);
    await updatePaidInvoice(invoice);

    const chatId = invoice.description;
    const user = await User.getUser(chatId);
    console.log(user)

    const rates = await getRates();
    const rateForAsset = rates[invoice.asset];

    if (user) {
        await user.setSubscriptionActive();
        await user.resetResponseCount();
       // await user.setSubscriptionEndDate();

        const balanceInRub = Math.round(parseFloat(invoice.paid_amount) * rateForAsset);
        const totalBalance = await user.getBalance() + balanceInRub;
        await user.setBalance(totalBalance);
        await bot.sendMessage(ADMIN, `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç ${user.firstName} —Å—É–º–º–∞: ${balanceInRub} —Ä—É–±.`);
        await bot.sendMessage(chatId, `üëå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É ${user.firstName}, –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`);
    } else {
        logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
}


